// Generated by CoffeeScript 1.3.3
var app, express, getClients, io, localTime, padStr, server, socket;

express = require('express');

socket = require('socket.io');

app = express();

server = app.listen(8080);

io = socket.listen(server);

app.set('view engine', 'jade');

app.set('views', 'views/');

app.use('/', express["static"](__dirname + '/public'));

app.get('/:page', function(req, res) {
  if (req.params.page !== 'favicon.ico') {
    return res.render(req.params.page);
  }
});

app.get('/', function(req, res) {
  return res.render('home');
});

padStr = function(i) {
  if (i < 10) {
    return "0" + i;
  } else {
    return "" + i;
  }
};

localTime = function() {
  var curDate, time;
  curDate = new Date();
  return time = {
    string: padStr(curDate.getHours()) + ':' + padStr(curDate.getMinutes()) + ':' + padStr(curDate.getSeconds()),
    hour: curDate.getHours()
  };
};

getClients = function(socket) {
  var cList, client, clients, _i, _len;
  cList = socket.clients();
  console.log(cList[0].store);
  clients = {};
  for (_i = 0, _len = cList.length; _i < _len; _i++) {
    client = cList[_i];
    clients[client.id] = {
      id: client.id,
      nickname: client.store.data.cdata.nickname
    };
  }
  return clients;
};

io.sockets.on('connection', function(client) {
  console.log(localTime().string + ' - New connection');
  client.on('message', function(data) {
    return client.get('cdata', function(err, cdata) {
      io.sockets.emit('newmsg', {
        nick: cdata.nickname,
        msg: data.msg
      });
      return console.log(localTime().string + ' - ' + cdata.nickname + ': ' + data.msg);
    });
  });
  client.on('join', function(data) {
    var ulist, userdata;
    userdata = {
      id: client.id,
      nickname: data.nickname
    };
    client.set('cdata', {
      nickname: data.nickname
    });
    ulist = getClients(io.sockets);
    io.sockets.emit('join', {
      userdata: userdata,
      userlist: ulist
    });
    return console.log(localTime().string + ' - ' + data.nickname + ' connected with ID: ' + client.id);
  });
  return client.on('disconnect', function() {
    return client.get('cdata', function(err, cdata) {
      return client.broadcast.emit('disconnect', {
        id: client.id,
        nickname: cdata.nickname
      });
    });
  });
});
